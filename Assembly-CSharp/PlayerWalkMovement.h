#pragma once

#include "..\UnityEngine\PhysicMaterial.h"
#include "..\UnityEngine\Rigidbody.h"
#include "..\UnityEngine\CapsuleCollider.h"
#include "TriggerLadder.h"
#include "..\UnityEngine\Vector3.h"
#include "..\BaseEntity\MovementModify.h"

namespace rust 
{
	class PlayerWalkMovement : public BaseMovement // 0x40
	{
	public:
		UnityEngine::PhysicMaterial* zeroFrictionMaterial; // 0x40 (size: 0x8, flags: 0x6, type: 0x12)
		UnityEngine::PhysicMaterial* highFrictionMaterial; // 0x48 (size: 0x8, flags: 0x6, type: 0x12)
		UnityEngine::Rigidbody* body; // 0x50 (size: 0x8, flags: 0x1, type: 0x12)
		UnityEngine::CapsuleCollider* capsule; // 0x58 (size: 0x8, flags: 0x1, type: 0x12)
		TriggerLadder* ladder; // 0x60 (size: 0x8, flags: 0x1, type: 0x12)
		float capsuleHeight; // 0x68 (size: 0x4, flags: 0x6, type: 0xc)
		float capsuleCenter; // 0x6c (size: 0x4, flags: 0x6, type: 0xc)
		float capsuleHeightDucked; // 0x70 (size: 0x4, flags: 0x6, type: 0xc)
		float capsuleCenterDucked; // 0x74 (size: 0x4, flags: 0x6, type: 0xc)
		float gravityTestRadius; // 0x78 (size: 0x4, flags: 0x6, type: 0xc)
		float gravityMultiplier; // 0x7c (size: 0x4, flags: 0x6, type: 0xc)
		float gravityMultiplierSwimming; // 0x80 (size: 0x4, flags: 0x6, type: 0xc)
		float maxAngleWalking; // 0x84 (size: 0x4, flags: 0x6, type: 0xc)
		float maxAngleClimbing; // 0x88 (size: 0x4, flags: 0x6, type: 0xc)
		float maxAngleSliding; // 0x8c (size: 0x4, flags: 0x6, type: 0xc)
		float maxVelocity; // 0x90 (size: 0x4, flags: 0x1, type: 0xc)
		float groundAngle; // 0x94 (size: 0x4, flags: 0x1, type: 0xc)
		float groundAngleNew; // 0x98 (size: 0x4, flags: 0x1, type: 0xc)
		float groundTime; // 0x9c (size: 0x4, flags: 0x1, type: 0xc)
		float jumpTime; // 0xa0 (size: 0x4, flags: 0x1, type: 0xc)
		float landTime; // 0xa4 (size: 0x4, flags: 0x1, type: 0xc)
		UnityEngine::Vector3 velocity; // 0xa8 (size: 0xc, flags: 0x1, type: 0x11)
		UnityEngine::Vector3 groundNormal; // 0xb4 (size: 0xc, flags: 0x1, type: 0x11)
		UnityEngine::Vector3 groundNormalNew; // 0xc0 (size: 0xc, flags: 0x1, type: 0x11)
		float nextSprintTime; // 0xcc (size: 0x4, flags: 0x1, type: 0xc)
		float lastSprintTime; // 0xd0 (size: 0x4, flags: 0x1, type: 0xc)
		bool sprintForced; // 0xd4 (size: 0x1, flags: 0x1, type: 0x2)
		BaseEntity::MovementModify modify; // 0xd8 (size: 0x4, flags: 0x1, type: 0x11)
		bool grounded; // 0xdc (size: 0x1, flags: 0x1, type: 0x2)
		bool wasGrounded; // 0xdd (size: 0x1, flags: 0x1, type: 0x2)
		bool climbing; // 0xde (size: 0x1, flags: 0x1, type: 0x2)
		bool wasClimbing; // 0xdf (size: 0x1, flags: 0x1, type: 0x2)
		bool sliding; // 0xe0 (size: 0x1, flags: 0x1, type: 0x2)
		bool wasSliding; // 0xe1 (size: 0x1, flags: 0x1, type: 0x2)
		bool swimming; // 0xe2 (size: 0x1, flags: 0x1, type: 0x2)
		bool wasSwimming; // 0xe3 (size: 0x1, flags: 0x1, type: 0x2)
		bool jumping; // 0xe4 (size: 0x1, flags: 0x1, type: 0x2)
		bool wasJumping; // 0xe5 (size: 0x1, flags: 0x1, type: 0x2)
		bool falling; // 0xe6 (size: 0x1, flags: 0x1, type: 0x2)
		bool wasFalling; // 0xe7 (size: 0x1, flags: 0x1, type: 0x2)
		bool flying; // 0xe8 (size: 0x1, flags: 0x1, type: 0x2)
		bool wasFlying; // 0xe9 (size: 0x1, flags: 0x1, type: 0x2)
	}; // size = 0xf0
}
