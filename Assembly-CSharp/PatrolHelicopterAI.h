#pragma once

#include "..\UnityEngine\List.h"
#include "..\UnityEngine\Vector3.h"
#include "..\UnityEngine\Quaternion.h"
#include "HelicopterTurret.h"
#include "BaseHelicopter.h"
#include "GameObjectRef.h"

namespace rust 
{
	class PatrolHelicopterAI : public BaseMonoBehaviour // 0x18
	{
	public:
		UnityEngine::List<PatrolHelicopterAI.targetinfo>* _targetList; // 0x18 (size: 0x8, flags: 0x6, type: 0x15)
		HelicopterTurret* leftGun; // 0x20 (size: 0x8, flags: 0x6, type: 0x12)
		HelicopterTurret* rightGun; // 0x28 (size: 0x8, flags: 0x6, type: 0x12)
		BaseHelicopter* helicopterBase; // 0x30 (size: 0x8, flags: 0x6, type: 0x12)
		UnityEngine::List<MonumentInfo>* _visitedMonuments; // 0x38 (size: 0x8, flags: 0x6, type: 0x15)
		GameObjectRef* rocketProjectile; // 0x40 (size: 0x8, flags: 0x6, type: 0x12)
		GameObjectRef* rocketProjectile_Napalm; // 0x48 (size: 0x8, flags: 0x6, type: 0x12)
		UnityEngine::Vector3 interestZoneOrigin; // 0x50 (size: 0xc, flags: 0x6, type: 0x11)
		UnityEngine::Vector3 destination; // 0x5c (size: 0xc, flags: 0x6, type: 0x11)
		bool hasInterestZone; // 0x68 (size: 0x1, flags: 0x6, type: 0x2)
		float moveSpeed; // 0x6c (size: 0x4, flags: 0x6, type: 0xc)
		float maxSpeed; // 0x70 (size: 0x4, flags: 0x6, type: 0xc)
		float courseAdjustLerpTime; // 0x74 (size: 0x4, flags: 0x6, type: 0xc)
		UnityEngine::Quaternion targetRotation; // 0x78 (size: 0x10, flags: 0x6, type: 0x11)
		UnityEngine::Vector3 _aimTarget; // 0x88 (size: 0xc, flags: 0x1, type: 0x11)
		bool movementLockingAiming; // 0x94 (size: 0x1, flags: 0x1, type: 0x2)
		bool hasAimTarget; // 0x95 (size: 0x1, flags: 0x1, type: 0x2)
		bool aimDoorSide; // 0x96 (size: 0x1, flags: 0x1, type: 0x2)
		UnityEngine::Vector3 windVec; // 0x98 (size: 0xc, flags: 0x6, type: 0x11)
		UnityEngine::Vector3 targetWindVec; // 0xa4 (size: 0xc, flags: 0x6, type: 0x11)
		float windForce; // 0xb0 (size: 0x4, flags: 0x6, type: 0xc)
		float windFrequency; // 0xb4 (size: 0x4, flags: 0x6, type: 0xc)
		float targetThrottleSpeed; // 0xb8 (size: 0x4, flags: 0x6, type: 0xc)
		float throttleSpeed; // 0xbc (size: 0x4, flags: 0x6, type: 0xc)
		float maxRotationSpeed; // 0xc0 (size: 0x4, flags: 0x6, type: 0xc)
		float rotationSpeed; // 0xc4 (size: 0x4, flags: 0x6, type: 0xc)
		float terrainPushForce; // 0xc8 (size: 0x4, flags: 0x6, type: 0xc)
		float obstaclePushForce; // 0xcc (size: 0x4, flags: 0x6, type: 0xc)
		UnityEngine::Vector3 pushVec; // 0xd0 (size: 0xc, flags: 0x1, type: 0x11)
		aiState _currentState; // 0xdc (size: 0x4, flags: 0x6, type: 0x11)
		UnityEngine::Vector3 _lastPos; // 0xe0 (size: 0xc, flags: 0x1, type: 0x11)
		UnityEngine::Vector3 _lastMoveDir; // 0xec (size: 0xc, flags: 0x1, type: 0x11)
		bool isDead; // 0xf8 (size: 0x1, flags: 0x1, type: 0x2)
		bool isRetiring; // 0xf9 (size: 0x1, flags: 0x1, type: 0x2)
		float spawnTime; // 0xfc (size: 0x4, flags: 0x1, type: 0xc)
		float lastDamageTime; // 0x100 (size: 0x4, flags: 0x1, type: 0xc)
		float deathTimeout; // 0x104 (size: 0x4, flags: 0x1, type: 0xc)
		float destination_min_dist; // 0x108 (size: 0x4, flags: 0x1, type: 0xc)
		float currentOrbitDistance; // 0x10c (size: 0x4, flags: 0x1, type: 0xc)
		float currentOrbitTime; // 0x110 (size: 0x4, flags: 0x1, type: 0xc)
		bool hasEnteredOrbit; // 0x114 (size: 0x1, flags: 0x1, type: 0x2)
		float orbitStartTime; // 0x118 (size: 0x4, flags: 0x1, type: 0xc)
		float maxOrbitDuration; // 0x11c (size: 0x4, flags: 0x1, type: 0xc)
		bool breakingOrbit; // 0x120 (size: 0x1, flags: 0x1, type: 0x2)
		float arrivalTime; // 0x124 (size: 0x4, flags: 0x6, type: 0xc)
		bool leftTubeFiredLast; // 0x128 (size: 0x1, flags: 0x1, type: 0x2)
		float lastRocketTime; // 0x12c (size: 0x4, flags: 0x1, type: 0xc)
		float timeBetweenRockets; // 0x130 (size: 0x4, flags: 0x1, type: 0xc)
		int numRocketsLeft; // 0x134 (size: 0x4, flags: 0x1, type: 0x8)
		UnityEngine::Vector3 strafe_target_position; // 0x138 (size: 0xc, flags: 0x1, type: 0x11)
		bool puttingDistance; // 0x144 (size: 0x1, flags: 0x1, type: 0x2)
		bool useNapalm; // 0x145 (size: 0x1, flags: 0x1, type: 0x2)
		float lastNapalmTime; // 0x148 (size: 0x4, flags: 0x81, type: 0xc)
		float lastStrafeTime; // 0x14c (size: 0x4, flags: 0x81, type: 0xc)
		float _lastThinkTime; // 0x150 (size: 0x4, flags: 0x1, type: 0xc)
	}; // size = 0x158
}
