#pragma once

#include "..\Ionic\Zlib\DeflateManager\CompressFunc.h"
#include "..\Ionic\Zlib\ZlibCodec.h"
#include "..\System\SByte.h"
#include "..\System\Int16.h"
#include "..\Ionic\Zlib\DeflateManager\Config.h"
#include "..\Ionic\Zlib\CompressionLevel.h"
#include "..\Ionic\Zlib\CompressionStrategy.h"
#include "..\Ionic\Zlib\Tree.h"

namespace Ionic
{
	namespace Zlib
{
	class DeflateManager : public Object // 0x0
	{
	public:
		Ionic::Zlib::DeflateManager::CompressFunc* DeflateFunction; // 0x10 (size: 0x8, flags: 0x1, type: 0x12)
		Ionic::Zlib::ZlibCodec* _codec; // 0x18 (size: 0x8, flags: 0x3, type: 0x12)
		unsigned char* pending; // 0x20 (size: 0x8, flags: 0x3, type: 0x1d)
		unsigned char* window; // 0x28 (size: 0x8, flags: 0x3, type: 0x1d)
		System::Int16* prev; // 0x30 (size: 0x8, flags: 0x3, type: 0x1d)
		System::Int16* head; // 0x38 (size: 0x8, flags: 0x3, type: 0x1d)
		Ionic::Zlib::DeflateManager::Config* config; // 0x40 (size: 0x8, flags: 0x1, type: 0x12)
		System::Int16* dyn_ltree; // 0x48 (size: 0x8, flags: 0x3, type: 0x1d)
		System::Int16* dyn_dtree; // 0x50 (size: 0x8, flags: 0x3, type: 0x1d)
		System::Int16* bl_tree; // 0x58 (size: 0x8, flags: 0x3, type: 0x1d)
		Ionic::Zlib::Tree* treeLiterals; // 0x60 (size: 0x8, flags: 0x3, type: 0x12)
		Ionic::Zlib::Tree* treeDistances; // 0x68 (size: 0x8, flags: 0x3, type: 0x12)
		Ionic::Zlib::Tree* treeBitLengths; // 0x70 (size: 0x8, flags: 0x3, type: 0x12)
		System::Int16* bl_count; // 0x78 (size: 0x8, flags: 0x3, type: 0x1d)
		int* heap; // 0x80 (size: 0x8, flags: 0x3, type: 0x1d)
		System::SByte* depth; // 0x88 (size: 0x8, flags: 0x3, type: 0x1d)
		int status; // 0x90 (size: 0x4, flags: 0x3, type: 0x8)
		int nextPending; // 0x94 (size: 0x4, flags: 0x3, type: 0x8)
		int pendingCount; // 0x98 (size: 0x4, flags: 0x3, type: 0x8)
		System::SByte data_type; // 0x9c (size: 0x1, flags: 0x3, type: 0x4)
		int last_flush; // 0xa0 (size: 0x4, flags: 0x3, type: 0x8)
		int w_size; // 0xa4 (size: 0x4, flags: 0x3, type: 0x8)
		int w_bits; // 0xa8 (size: 0x4, flags: 0x3, type: 0x8)
		int w_mask; // 0xac (size: 0x4, flags: 0x3, type: 0x8)
		int window_size; // 0xb0 (size: 0x4, flags: 0x3, type: 0x8)
		int ins_h; // 0xb4 (size: 0x4, flags: 0x3, type: 0x8)
		int hash_size; // 0xb8 (size: 0x4, flags: 0x3, type: 0x8)
		int hash_bits; // 0xbc (size: 0x4, flags: 0x3, type: 0x8)
		int hash_mask; // 0xc0 (size: 0x4, flags: 0x3, type: 0x8)
		int hash_shift; // 0xc4 (size: 0x4, flags: 0x3, type: 0x8)
		int block_start; // 0xc8 (size: 0x4, flags: 0x3, type: 0x8)
		int match_length; // 0xcc (size: 0x4, flags: 0x3, type: 0x8)
		int prev_match; // 0xd0 (size: 0x4, flags: 0x3, type: 0x8)
		int match_available; // 0xd4 (size: 0x4, flags: 0x3, type: 0x8)
		int strstart; // 0xd8 (size: 0x4, flags: 0x3, type: 0x8)
		int match_start; // 0xdc (size: 0x4, flags: 0x3, type: 0x8)
		int lookahead; // 0xe0 (size: 0x4, flags: 0x3, type: 0x8)
		int prev_length; // 0xe4 (size: 0x4, flags: 0x3, type: 0x8)
		Ionic::Zlib::CompressionLevel compressionLevel; // 0xe8 (size: 0x4, flags: 0x3, type: 0x11)
		Ionic::Zlib::CompressionStrategy compressionStrategy; // 0xec (size: 0x4, flags: 0x3, type: 0x11)
		int heap_len; // 0xf0 (size: 0x4, flags: 0x3, type: 0x8)
		int heap_max; // 0xf4 (size: 0x4, flags: 0x3, type: 0x8)
		int _lengthOffset; // 0xf8 (size: 0x4, flags: 0x3, type: 0x8)
		int lit_bufsize; // 0xfc (size: 0x4, flags: 0x3, type: 0x8)
		int last_lit; // 0x100 (size: 0x4, flags: 0x3, type: 0x8)
		int _distanceOffset; // 0x104 (size: 0x4, flags: 0x3, type: 0x8)
		int opt_len; // 0x108 (size: 0x4, flags: 0x3, type: 0x8)
		int static_len; // 0x10c (size: 0x4, flags: 0x3, type: 0x8)
		int matches; // 0x110 (size: 0x4, flags: 0x3, type: 0x8)
		int last_eob_len; // 0x114 (size: 0x4, flags: 0x3, type: 0x8)
		System::Int16 bi_buf; // 0x118 (size: 0x2, flags: 0x3, type: 0x6)
		int bi_valid; // 0x11c (size: 0x4, flags: 0x3, type: 0x8)
		bool Rfc1950BytesEmitted; // 0x120 (size: 0x1, flags: 0x1, type: 0x2)
		bool _WantRfc1950HeaderBytes; // 0x121 (size: 0x1, flags: 0x1, type: 0x2)
	}; // size = 0x128
}
