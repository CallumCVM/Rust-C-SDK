#pragma once

#include "..\UnityEngine\List.h"
#include "..\UnityEngine\GameObject.h"
#include "..\UnityEngine\Vector3.h"
#include "MegaWire.h"
#include "..\UnityEngine\Material.h"
#include "MegaWireGizmoType.h"
#include "..\UnityEngine\Color.h"
#include "MegaWireUnits.h"

namespace rust 
{
	class MegaWirePlantPolesList : public MonoBehaviour // 0x18
	{
	public:
		UnityEngine::List<UnityEngine.Vector3>* waypoints; // 0x18 (size: 0x8, flags: 0x6, type: 0x15)
		UnityEngine::GameObject* pole; // 0x20 (size: 0x8, flags: 0x6, type: 0x12)
		UnityEngine::List<UnityEngine.GameObject>* poles; // 0x28 (size: 0x8, flags: 0x6, type: 0x15)
		MegaWire* copyfrom; // 0x30 (size: 0x8, flags: 0x6, type: 0x12)
		UnityEngine::Material* material; // 0x38 (size: 0x8, flags: 0x6, type: 0x12)
		UnityEngine::List<MegaWirePlantPolesList.MegaWireSection>* knots; // 0x40 (size: 0x8, flags: 0x1, type: 0x15)
		bool closed; // 0x48 (size: 0x1, flags: 0x6, type: 0x2)
		int curve; // 0x4c (size: 0x4, flags: 0x6, type: 0x8)
		float start; // 0x50 (size: 0x4, flags: 0x6, type: 0xc)
		float length; // 0x54 (size: 0x4, flags: 0x6, type: 0xc)
		float spacing; // 0x58 (size: 0x4, flags: 0x6, type: 0xc)
		bool update; // 0x5c (size: 0x1, flags: 0x6, type: 0x2)
		UnityEngine::Vector3 rotate; // 0x60 (size: 0xc, flags: 0x6, type: 0x11)
		float offset; // 0x6c (size: 0x4, flags: 0x6, type: 0xc)
		bool conform; // 0x70 (size: 0x1, flags: 0x6, type: 0x2)
		float upright; // 0x74 (size: 0x4, flags: 0x6, type: 0xc)
		bool addwires; // 0x78 (size: 0x1, flags: 0x6, type: 0x2)
		UnityEngine::Vector3 positionVariation; // 0x7c (size: 0xc, flags: 0x6, type: 0x11)
		UnityEngine::Vector3 rotateVariation; // 0x88 (size: 0xc, flags: 0x6, type: 0x11)
		UnityEngine::Vector3 scaleVariation; // 0x94 (size: 0xc, flags: 0x6, type: 0x11)
		float spacingVariation; // 0xa0 (size: 0x4, flags: 0x6, type: 0xc)
		bool reverseWire; // 0xa4 (size: 0x1, flags: 0x6, type: 0x2)
		int seed; // 0xa8 (size: 0x4, flags: 0x6, type: 0x8)
		float wireSizeMult; // 0xac (size: 0x4, flags: 0x6, type: 0xc)
		float stretch; // 0xb0 (size: 0x4, flags: 0x6, type: 0xc)
		bool showgizmo; // 0xb4 (size: 0x1, flags: 0x6, type: 0x2)
		bool showgizmoparams; // 0xb5 (size: 0x1, flags: 0x6, type: 0x2)
		MegaWireGizmoType gizmoType; // 0xb8 (size: 0x4, flags: 0x6, type: 0x11)
		float arrowwidth; // 0xbc (size: 0x4, flags: 0x6, type: 0xc)
		float arrowlength; // 0xc0 (size: 0x4, flags: 0x6, type: 0xc)
		float vertStart; // 0xc4 (size: 0x4, flags: 0x6, type: 0xc)
		float vertLength; // 0xc8 (size: 0x4, flags: 0x6, type: 0xc)
		float arrowoff; // 0xcc (size: 0x4, flags: 0x6, type: 0xc)
		float dashdist; // 0xd0 (size: 0x4, flags: 0x6, type: 0xc)
		UnityEngine::Color arrowCol; // 0xd4 (size: 0x10, flags: 0x6, type: 0x11)
		UnityEngine::Color lineCol; // 0xe4 (size: 0x10, flags: 0x6, type: 0x11)
		UnityEngine::Color otherCol; // 0xf4 (size: 0x10, flags: 0x6, type: 0x11)
		UnityEngine::Color dashCol; // 0x104 (size: 0x10, flags: 0x6, type: 0x11)
		MegaWireUnits units; // 0x114 (size: 0x4, flags: 0x6, type: 0x11)
		float unitsScale; // 0x118 (size: 0x4, flags: 0x6, type: 0xc)
		float pathlength; // 0x11c (size: 0x4, flags: 0x1, type: 0xc)
	}; // size = 0x120
}
